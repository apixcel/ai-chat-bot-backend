generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String           @id @default(uuid())
  email                 String           @unique
  avatar                String?
  first_name            String
  last_name             String
  password              String
  role                  UserRole
  isVerified            Boolean          @default(false)
  currentSubscriptionId String           @default("")
  Subscription          Subscription[]
  createdAt             DateTime         @default(now()) @db.Timestamptz(3)
  updatedAt             DateTime         @updatedAt @db.Timestamptz(3)
  App                   App[]
  Otp                   Otp?
  GoogleAuthToken       GoogleAuthToken?
}

model Otp {
  id       String   @id @default(uuid())
  user     User     @relation(fields: [userId], references: [id])
  userId   String   @unique
  code     String
  coolDown DateTime @db.Timestamptz(3)
}

model Plan {
  id              String         @id @default(uuid())
  name            String
  price           Int // in cents/ (real price * 100);
  durationMonths  Int
  appLimit        Int // Set to -1 for unlimited albums
  customization   Boolean
  trialPeriodDays Int            @default(0) //FREE PLAN DAYS
  isActive        Boolean        @default(true)
  Subscription    Subscription[]
  createdAt       DateTime       @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime       @updatedAt
}

model Subscription {
  id              String             @id @default(uuid())
  user            User               @relation(fields: [userId], references: [id])
  userId          String
  planInfo        Plan               @relation(fields: [planId], references: [id])
  planId          String
  price           Int // in cents/ (react price * 100);
  trialPeriodDays Int                @default(0) //FREE PLAN DAYS
  startDate       DateTime
  status          SubscriptionStatus
  isActive        Boolean            @default(true)
  createdAt       DateTime           @default(now()) @db.Timestamptz(3)
}

model App {
  id               String   @id @default(uuid())
  appName          String
  authorizedOrigin String
  apiKeyHash       String   @unique
  googleDocId      String   @default("")
  userId           String
  user             User     @relation(fields: [userId], references: [id])
  createdAt        DateTime @default(now()) @db.Timestamptz(3)
  updatedAt        DateTime @updatedAt @db.Timestamptz(3)
}

model GoogleAuthToken {
  userId       String   @unique
  user         User     @relation(fields: [userId], references: [id])
  accessToken  String?
  refreshToken String?
  scope        String?
  tokenType    String?
  expiry_date  DateTime @db.Timestamptz(3)
  createdAt    DateTime @default(now()) @db.Timestamptz(3)
}

enum UserRole {
  user
  admin
}

enum SubscriptionStatus {
  active
  canceled
  incomplete
  past_due
  trialing
}
